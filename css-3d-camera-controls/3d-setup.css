/* camera settings only applies to the uniform container */
.uniform{
	--camera-scale: 1;
	--camera-perspective: 1000;
	--camera-Y: 60;
	--camera-Z: 60;

	--translate-X: 0;
	--translate-Y: 0;
	--translate-Z: -100;
}

/* adds an invisible layer of box-shadow to prevent 
   edges being anti-aliased in Firefox */
[data-crisp]{
	box-shadow: 0 0 0 1px rgba(0, 0, 0, 0);
}

[data-crisp-all], 
[data-crisp-all]::before, 
[data-crisp-all]::after{
	box-shadow: 0 0 0 1px rgba(0, 0, 0, 0);
}

/* expose the element in 3d space */
[data-3d]{
	transform-style: preserve-3d;
}

/* hide the element's back side */
[data-nobackface]{
	backface-visibility: hidden;
}

/* uniform is the only scalable grid container in a 3d project */
.uniform{
	position: absolute;
	left: 0;
	top: 0;
	width: 100vw;
	height: 100vh;
	transform: scale(var(--camera-scale, 1));
	transition: transform ease calc(0.5s * (100 / var(--animation-speed)));
	display: grid;
	place-items: center;
	overflow: visible;
	cursor: grab;
}

html:active .uniform{
	cursor: grabbing;
}

/* stage is the parent to hold the scene and to provide camera controls */
.stage{
	position: relative;
	left: 0;
	top: 0;
	width: calc(500 * var(--upx));
	height: calc(500 * var(--upx));
	background:rgba(0, 0, 0, 0.1);

    transform: 
		perspective(calc(var(--camera-perspective) * 1px)) 
		rotateX(calc(var(--camera-Y, 0) * 1deg)) 
		rotateZ(calc(var(--camera-Z, 0) * 1deg)) 
		translate3d(calc(var(--translate-X, 0) * var(--upx)), calc(var(--translate-Y, 0) * var(--upx)), calc(var(--translate-Z, 0) * var(--upx)));

	/* calculate how far the element can rotate to proceed 2 successful turns */
	--maxium-rotation: calc(360deg + var(--camera-Z, 0deg));

	transition: transform ease calc(0.5s * (100 / var(--animation-speed)));
}

.uniform[data-no-transition="1"] > .stage{
	transition: none;
}